apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-querier
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-querier
  labels:
    app: thanos-querier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thanos-querier
  template:
    metadata:
      labels:
        app: thanos-querier
    spec:
      serviceAccountName: thanos-querier
      nodeSelector:
        node-role.kubernetes.io/infra: ''
      tolerations:
        - key: node-role.kubernetes.io/infra
          operator: Exists
          effect: NoSchedule
      containers:
      - name: thanos-query
        image: artifactory.ssnc.dev/quay.io/thanos/thanos:v0.31.0
        volumeMounts:
          - name: bd-certs
            readOnly: true
            mountPath: /certs
        args:
        - query
        - '--query.replica-label=prometheus'
        - '--query.replica-label=prometheus_replica'
        - '--query.replica-label=orig_prometheus_replica'
        - '--query.auto-downsampling'
        - '--query.default-step=1m'
        - '--query.metadata.default-time-range=600m'
        - '--store.response-timeout=0'
        - '--grpc-server-tls-cert=/certs/tls.crt'
        - '--grpc-server-tls-key=/certs/tls.key'
        # this querier only needs to be made aware of the metrics in its own cluster
        - '--endpoint=dnssrv+_grpc._tcp.thanos-store-gateway.mon.svc.cluster.local'
        - '--endpoint=dnssrv+_grpc._tcp.thanos-sidecar.mon.svc.cluster.local'
        ports:
        - name: http
          containerPort: 10902
        - name: grpc
          containerPort: 10901
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
        resources:
          limits:
            cpu: "1"
            memory: "4Gi"
          requests:
            cpu: "200m"
            memory: "1Gi"
      volumes:
      - name: secret-thanos-querier-tls
        secret:
          secretName: thanos-querier-tls
      - name: secret-thanos-querier-proxy 
        secret:
          secretName: thanos-querier-proxy 
      - name: bd-certs
        secret:
          secretName: bd-ingress-cert
          defaultMode: 420
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: thanos-querier-tls
  labels:
    app: thanos-querier
  name: thanos-querier
spec:
  ports:
  - port: 9091
    protocol: TCP
    targetPort: http
    name: http
  - port: 10901
    protocol: TCP
    targetPort: grpc
    name: grpc
  selector:
    app: thanos-querier
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: thanos-sidecar
  name: thanos-sidecar
spec:
  ports:
  - port: 10901
    protocol: TCP
    targetPort: grpc
    name: grpc
  selector:
    prometheus: federated-prometheus
  type: ClusterIP
  clusterIP: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    haproxy.router.openshift.io/timeout: "600s"
    openshift.io/host.generated: "true"
  labels:
    app: thanos-querier
  name: thanos-querier
spec:
  host: thanos-querier.apps.cluster.env.bdreporting.local
  port:
    targetPort: http
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: thanos-querier
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    haproxy.router.openshift.io/timeout: "600s"
    openshift.io/host.generated: "true"
  labels:
    app: thanos-querier
  name: thanos-querier-grpc
spec:
  host: thanos-querier-grpc.apps.cluster.env.bdreporting.local
  port:
    targetPort: grpc
  to:
    kind: Service
    name: thanos-querier
    weight: 100
  tls:
    termination: passthrough
  wildcardPolicy: None
